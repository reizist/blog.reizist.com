<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on reizist&#39;s memo</title>
    <link>https://blog.reizist.com/post/</link>
    <description>Recent content in Posts on reizist&#39;s memo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Jun 2020 10:50:22 +0900</lastBuildDate>
    
	<atom:link href="https://blog.reizist.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Datalake S3 Export Rds</title>
      <link>https://blog.reizist.com/post/datalake-s3-export-rds/</link>
      <pubDate>Tue, 09 Jun 2020 10:50:22 +0900</pubDate>
      
      <guid>https://blog.reizist.com/post/datalake-s3-export-rds/</guid>
      <description>データレイクをどうするかを考える機会があったのでシュッとメモ :memo:
現在データマートを作るための、生データの参照先として、日時でとったsnapshotからrestoreしたDBを構築している(レポーティングDBと呼称している TODO: レポーティングDBとよんでいる理由?)。 が、DBのrunning costも馬鹿にならないし、マイクロサービスの文脈でボンボン新たなDBが映えるたびに1:1でレポーティングDBをボンボン増やすのもなぁ、ということで、S3をデータレイクにするパターンを検証した。
検証といってもやったことは単純で、今年1月に発表されたRDS snapshotをS3にエクスポートする機能を使い、snapshotをparquet化。 Glueクローラを用いてS3からスキーマ検出/Athena上でテーブル化された状態でembulk-input-athenaを用いてBQに投げることができるのを確認した。
唯一ハマったのは、S3へのexport時デフォルトでKMSによって暗号化されているためS3を参照するロールにKMSのDecrypt権限 &amp;quot;kms:Decrypt&amp;quot; が必要になる点。</description>
    </item>
    
    <item>
      <title>test coverageをcircleciでoutputするようにした</title>
      <link>https://blog.reizist.com/post/output-coverage-slack/</link>
      <pubDate>Thu, 08 Nov 2018 02:17:00 +0900</pubDate>
      
      <guid>https://blog.reizist.com/post/output-coverage-slack/</guid>
      <description>test coverageをcircleciでoutputするようにした。 所属チームの他のコンポーネントでテスト的に無料枠のCodecovを使っていて、 自分がメインで見ているrailsプロダクトにもcoverageを意識的に見る文化を取り入れたいと思ったものの Codecovを最初から有料枠にするのも気が引けたので無料でできる範囲から。
やったことはほぼ https://qiita.com/u-minor/items/c18f0f03a9255f9e5231 の通りで、
多少アレンジしている。 circleciでの設定はrun section追加するだけで、プロジェクトの bin/ に放り込んだshell scriptを実行しているだけ。
- run: name: Post coverage command: bin/post-coverage-to-slack  ### # original: https://gist.githubusercontent.com/u-minor/8cb27fa9c04163142ebd/raw/circleci-coverage-slack # Post coverage rate to Slack # # Usage: bash circleci-coverage-slack.sh [cobertura|jacoco] # # Required environment variables: # # - CIRCLE_TOKEN: project-specific readonly API token (need to access build artifacts for others) # - SLACK_ENDPOINT: Slack endpoint url # - COVERAGE_FILE: coverage xml filename (default: coverage.</description>
    </item>
    
  </channel>
</rss>